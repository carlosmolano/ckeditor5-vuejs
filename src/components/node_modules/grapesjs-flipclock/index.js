// https://ewiki.vnexpress.net/wp-content/themes/eduma-child/page-templates/landing-3/flipclock.css
// https://ewiki.vnexpress.net/wp-content/themes/eduma-child/page-templates/landing-3/flipclock.js

import grapesjs from 'grapesjs';
const countdownRef = 'flipclock';

function loadBlocks(editor, opt = {}) {
    const c = opt;
    const bm = editor.BlockManager;
    const pfx = c.className;
  
    if (c.blocks.indexOf(countdownRef) >= 0) {
      bm.add(countdownRef, {
        label: c.labelCountdown,
        category: c.labelCountdownCategory,
        attributes: {class:'fa fa-clock-o'},
        content: `
          <style>
          .flipclock.flip-clock-wrapper{ margin: 0; padding-top: 50px;font-size: 20px;display:inline-block;justify-content:center;display:flex;}
          
          .flipclock-message{
            color:rgb(213, 3, 34);
            font-size:50px;
            font-family:'Baloo Tamma', cursive;
            text-align:center;
          }

          .flip-clock-divider .flip-clock-label {
            color: inherit;
          }

          .flip-clock-wrapper a {
            color: inherit;
          }
          </style>
          <div class="${pfx} flip-clock-wrapper"></div>
          <div class="${pfx}-message">EXPIRED</div>
        `
      });
    }
}  

function loadComponents(editor, opt = {}) {
    const c = opt;
    const domc = editor.DomComponents;
    const defaultType = domc.getType('default');
    const textType = domc.getType('text');
    const defaultModel = defaultType.model;
    const defaultView = defaultType.view;
    const textModel = textType.model;
    const textView = textType.view;
    const pfx = c.className;
    const COUNTDOWN_TYPE = 'flipclock';
    const classFaces = {
      Counter: 'counter',
      MinuteCounter: 'minute-counter',
      HourlyCounter: 'hourly-counter',
      DailyCounter: 'daily-counter',
      TwelveHourClock: 'twelve-hour',
      TwentyFourHourClock: 'twenty-four-hour',
    };
  
    domc.addType(COUNTDOWN_TYPE, {
  
      model: defaultModel.extend({
        defaults: {
          ...defaultModel.prototype.defaults,
          language: c.language,
          startfrom: c.startTime,
          clockFace: c.clockFace,
          countDown: c.countDown,
          showSeconds: c.showSeconds,
          endText: c.endText,
          scriptFile: c.script,
          stylesheetFile: c.stylesheet,
          className: c.className,
          droppable: true,
          traits: [{
            label: 'Language',
            name: 'language',
            type: 'select',
            changeProp: 1,
            options: [
              {value: 'en', name: 'English'},
              {value: 'vi', name: 'Tiếng Việt'},
            ]
          },
          {
            label: 'Start',
            name: 'startfrom',
            changeProp: 1,
            type: c.dateInputType,
          },
          {
            name: 'clockFace',
            type: 'select',
            changeProp: 1,
            options: [
                {value: 'Counter', name: 'Seconds'},
                {value: 'MinuteCounter', name: 'MinuteCounter'},
                {value: 'HourlyCounter', name: 'HourlyCounter'},
                {value: 'DailyCounter', name: 'DailyCounter'},
                {value: 'TwelveHourClock', name: 'TwelveHourClock'},
                {value: 'TwentyFourHourClock', name: 'TwentyFourHourClock'},
            ],
            label: 'Clock Face'
          },
          {
            label: 'Countdown',
            name: 'countDown',
            changeProp: 1,
            type: 'checkbox',
          },
          {
            label: 'Show seconds',
            name: 'showSeconds',
            changeProp: 1,
            type: 'checkbox',
          },
          // {
          //   label: 'End text',
          //   name: 'endText',
          //   changeProp: 1,
          // }
          ],
          script: function() {
            var el = this;

            var startfrom = window.undef || '{[ startfrom ]}';
            var language = window.undef || '{[ language ]}';
            var endText = window.undef || '{[ endText ]}';
            var clockFace = window.undef || '{[ clockFace ]}';
            var countdown = window.undef || '{[ countDown ]}';
            countdown = countdown == 'true';
            
            var showSeconds = window.undef || '{[ showSeconds ]}';
            showSeconds = showSeconds == 'true';

            var scriptFile = window.undef || '{[ scriptFile ]}';
            var stylesheetFile = window.undef || '{[ stylesheetFile ]}';

            var clock;
            var init = function () {   
                if (FlipClock && FlipClock.Lang) {
                  if (!FlipClock.Lang.Vietnamese) {
                    FlipClock.Lang.Vietnamese = {
                      'years'   : 'Năm',
                      'months'  : 'Tháng',
                      'days'    : 'Ngày',
                      'hours'   : 'Giờ',
                      'minutes' : 'Phút',
                      'seconds' : 'Giây'	
                    };
                    FlipClock.Lang['vi']        = FlipClock.Lang.Vietnamese;
                    FlipClock.Lang['vi-vn']        = FlipClock.Lang.Vietnamese;
                    FlipClock.Lang['vi-VN']        = FlipClock.Lang.Vietnamese;
                  }
                }
            
                // Set some date in the future. In this case, it's always Jan 1
                var futureDate  = new Date(startfrom);

                // Grab the current date
                var currentDate = new Date();

                // Calculate the difference in seconds between the future and current date
                var diff = futureDate.getTime() / 1000 - currentDate.getTime() / 1000;

                if (diff < 0) {
                  diff = 0;
                  futureDate = currentDate;
                }

                var startFunc = function() {
                  jQuery('.{[ className ]}-message').css('display', 'none');
                };

                var stopFunc = function() {
                  jQuery('.{[ className ]}-message').css('display', 'inherit');
                };

                if (clockFace == 'TwelveHourClock' || clockFace == 'TwentyFourHourClock') {
                  clock = jQuery('.{[ className ]}').FlipClock({
                    clockFace: clockFace,
                    language: language,
                    callbacks: {
                      start: startFunc,
                      stop: stopFunc,
                      reset: startFunc,
                    }
                  });              
                }
                else {
                  var config = {
                    clockFace: clockFace,
                    showSeconds: showSeconds,
                    countdown: countdown,
                    language: language,
                    callbacks: {
                      start: startFunc,
                      stop: stopFunc,
                      reset: startFunc,
                    }
                  };
                  clock = jQuery('.{[ className ]}').FlipClock(diff, config);              
                }



                if (clockFace == 'Counter') {
                  var func = countdown ? clock.decrement : clock.increment;
                  setInterval(function() {
                    func();
                  }, 1000);
                }
            };
            
            if (scriptFile && typeof FlipClock == 'undefined') {
              var css = document.createElement('link');
              css.rel = 'stylesheet';
              css.href = stylesheetFile
              document.head.appendChild(css);

              var js = document.createElement('script');
              js.onload = init;
              js.src = scriptFile;
              
              document.head.appendChild(js);
            }
            else {
              init();
            }

          }
        },

        init() {
          const cls = c.className;
          this.get('classes').pluck('name').indexOf(cls) < 0 && this.addClass(cls);
        },
        
      }, {
        isComponent(el) {
          if(
            el && el.classList && el.classList.contains('flip-clock-wrapper')
            ) {
            return {
              type: COUNTDOWN_TYPE
            };
          }
        },
      }),
  
  
      view: defaultView.extend({
        init() {
          // change:language change:clockFace change:startfrom change:countDown change:showSeconds change:endText
          this.listenTo(this.model, 'change', this.updateScript);
          const comps = this.model.get('components');
  
          // Add a basic countdown template if it's not yet initialized
          if (!comps.length) {
            comps.reset(); //flip-clock-wrapper
            comps.add(''/*`
              <ul class="flip play">
                <li data-digit="0" class="flip-clock-active">
                  <a href="#" class="flip-clock-before">
                    <div class="up"><div class="shadow"></div><div class="inn flip-clock-before">0</div></div>
                    <div class="down flip-clock-before"><div class="shadow"></div>
                    <div class="inn flip-clock-before">0</div></div>
                  </a>
                </li>
              </ul>
            `*/);
          }
  
        }
      }),
    });
}

export default grapesjs.plugins.add('grapesjs-flipclock', (editor, opts = {}) => {
  let c = opts;

  let cur = new Date();
  cur.setMinutes(cur.getMinutes() - cur.getTimezoneOffset());
  cur.setSeconds(cur.getSeconds() + 10);

  let defaults = {
    blocks: [countdownRef],

    language: 'vi', 

    className: 'flipclock',

    // Default style
    defaultStyle: true,

    // Default start time, eg. '2018-01-25 00:00'
    startTime: cur.toISOString().substring(0, 19),

    clockFace: 'DailyCounter',

    countDown: true,

    showSeconds: true,

    // Text to show when the countdown is ended
    endText: 'EXPIRED',

    // Date input type, eg, 'date', 'datetime-local'
    dateInputType: 'datetime-local',

    // Countdown label
    labelCountdown: 'FlipClock',

    // Countdown category label
    labelCountdownCategory: 'Extra',

    script: 'https://cdnjs.cloudflare.com/ajax/libs/flipclock/0.7.8/flipclock.min.js',
    stylesheet: 'https://cdnjs.cloudflare.com/ajax/libs/flipclock/0.7.8/flipclock.css',
    //stylesheet: 'https://unpkg.com/flipclock@0.8.0/dist/flipclock.css',
    //script: 'https://unpkg.com/flipclock@0.8.0/dist/flipclock.min.js',
  };

  // Load defaults
  for (let name in defaults) {
    if (!(name in c))
      c[name] = defaults[name];
  }

  // Add components
  loadComponents(editor, c);

  // Add components
  loadBlocks(editor, c);

});
