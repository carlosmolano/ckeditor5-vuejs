// https://github.com/dimsemenov/Magnific-Popup/
// Paralax: https://www.awwwards.com/30-great-websites-with-parallax-scrolling.html
// https://codepen.io/imprakash/pen/GgNMXO

import grapesjs from 'grapesjs';
const blockNamRef = 'bs4modal';
// const clsId = 'cls' + Math.random().toString().substr(2);
const clsId = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(2, 10);

function loadBlocks(editor, opt = {}) {
    const c = opt;
    const bm = editor.BlockManager;
    const pfx = c.className || blockNamRef;
  
    if (c.blocks.indexOf(blockNamRef) >= 0) {
      bm.add(blockNamRef, {
        label: c.pluginName,
        category: c.pluginNameCategory,
        attributes: {class:'fa fa-address-card'},
        content: `
          <style>
          </style>
          <button type="button" class="btn btn-primary" data-toggle="modal" data-target=".${clsId}">Open</button>
          <div  data-gjs-type="${blockNamRef}" data-backdrop="static" class="modal fade ${clsId}" tabindex="-1" role="dialog" aria-labelledby="" aria-hidden="true"></div>
        `
      });
    }
}  

function loadComponents(editor, opt = {}) {
    const c = opt;
    const domc = editor.DomComponents;
    const defaultType = domc.getType('default');
    const textType = domc.getType('text');
    const defaultModel = defaultType.model;
    const defaultView = defaultType.view;
    const textModel = textType.model;
    const textView = textType.view;
    const pfx = c.className;
  
    domc.addType(blockNamRef, {
  
      model: defaultModel.extend({
        defaults: {
          ...defaultModel.prototype.defaults,
          openWhen: c.openWhen,
          delay: c.delay,
          selectors: '',

          className: c.className,
          droppable: false,
          
          traits: [{
            label: 'Popup when',
            name: 'openWhen',
            type: 'select',
            changeProp: 1,
            options: [
              {value: 'onclick', name: 'Click an item'},
              {value: 'onload', name: 'After Loaded'},
              {value: 'onscroll', name: 'Scroll To End'},
              {value: 'beforeunload', name: 'Before window unload'},
            ]
          },{
            label: 'Selectors',
            name: 'selectors',
            changeProp: 1,
          },{
            label: 'Delay(ms)',
            name: 'delay',
            changeProp: 1,
            type: 'text',
          }],
          script: function() {
              var openWhen = window.openWhen || '{[ openWhen ]}';
              var delay = parseInt('0{[ delay ]}');
              var selectors = '{[ selectors ]}';
              var pluginId = this.id;

              var showDialog = function() {
                jQuery('.modal#' + pluginId).modal();
                window.registeredEvents = window.registeredEvents || {};
                window.registeredEvents[pluginId] = true;
              }
              
              if (openWhen == 'onload') {
                  (delay && delay > 0) ? setTimeout(showDialog, delay) : showDialog();
              }
              else if (openWhen == 'beforeunload') {
                jQuery(window).on('beforeunload', function() {
                  if (window.registeredEvents && window.registeredEvents[pluginId]) {
                    return;
                  }
                  window.registeredEvents = window.registeredEvents || {};
                  window.registeredEvents[pluginId] = true;
                  showDialog();
                  // Cancel the event as stated by the standard.
                  event.preventDefault();
                  // Chrome requires returnValue to be set.
                  event.returnValue = '';
                  return false;
                });
              }
              else if (openWhen == 'onscroll') {
                jQuery(window).scroll(function() {
                  if (window.registeredEvents && window.registeredEvents[pluginId]) {
                    return;
                  }

                  if(jQuery(window).scrollTop() + jQuery(window).height() > jQuery(document).height() - 200) {
                    (delay && delay > 0) ? setTimeout(showDialog(), delay) : showDialog();
                  }
                });
              }
  
              if (!!(selectors || '').trim()) {
                jQuery(selectors).on('click', showDialog);
              }
          }
        },

        init() {
          const cls = c.className;
          this.get('classes').pluck('name').indexOf(cls) < 0 && this.addClass(cls);
        },
        
      }, {
        isComponent(el) {
          if(el && el.classList && el.classList.contains(blockNamRef)) {
            return {
              type: blockNamRef
            };
          }

          // if (el.hasAttribute && el.hasAttribute(sliderId)) {
          //   return { type: sliderName };
          // }
        },
      }),
  
  
      view: defaultView.extend({
        init() {
          // change:language change:clockFace change:startfrom change:countDown change:showSeconds change:endText
          this.listenTo(this.model, 'change', this.updateScript);
          const comps = this.model.get('components');
  
          // Add a basic countdown template if it's not yet initialized
          if (!comps.length) {
            comps.reset(); //flip-clock-wrapper
            
            comps.add(`
                <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title">Modal title</h5>
                      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                      </button>
                    </div>
                    <div class="modal-body">
                      Content herehere
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                      <button type="button" class="btn btn-primary">Save changes</button>
                    </div>
                  </div>
                </div>
            `);
          }
  
        }
      }),
    });
}

export default grapesjs.plugins.add('grapesjs-bs4modal', (editor, opts = {}) => {
  let c = opts;

  let defaults = {
    blocks: [blockNamRef],

    language: 'vi', 

    className: blockNamRef,

    // Countdown label
    pluginName: 'Modal Dialog',

    // Countdown category label
    pluginNameCategory: 'Extra',
// 

  };

  // Load defaults
  for (let name in defaults) {
    if (!(name in c))
      c[name] = defaults[name];
  }

  // Add components
  loadComponents(editor, c);

  // Add components
  loadBlocks(editor, c);

});
